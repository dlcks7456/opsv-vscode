{
  "qamode": {
    "prefix": "qamode",
    "scope": "js",
    "body": [
      "(()=>{",
      "  const script = document.createElement('script');",
      "  script.src = 'https://cdn.jsdelivr.net/gh/dlcks7456/sndutils@main/js/qaCodes.js';",
      "  script.onload = function () {",
      "      qaMode({ defaultMode: true });",
      "  };",
      "  script.onerror = function () {",
      "      console.error('Failed to load qaCodes.js');",
      "  };",
      "  document.head.appendChild(script);",
      "})()"
    ],
    "description": "qaMode 출력"
  },
  "dataspringRedirect": {
    "prefix": "dataspring",
    "scope": "js",
    "body": [
      "// DataSpring: ACCESS_KEY",
      "const accessKey = '${1:엑세스 키}';",
      "const grpid = '${2:국가 코드}';",
      "const redirect = {",
      "  screenout: `https://survey1.datadata.co.kr/?ACCESS_KEY=\\${accessKey}&grpid=\\${grpid}&Q=STID&UID=\\${EID}&status=scrout`,",
      "  complete:  `https://survey1.datadata.co.kr/?ACCESS_KEY=\\${accessKey}&grpid=\\${grpid}&Q=STID&UID=\\${EID}&status=comp`,",
      "  quotafull: `https://survey1.datadata.co.kr/?ACCESS_KEY=\\${accessKey}&grpid=\\${grpid}&Q=STID&UID=\\${EID}&status=quotafull`,",
      "};"
    ],
    "description": "데이터스프링 리다이렉트 링크"
  },
  "dynataRedirect": {
    "prefix": "dynata",
    "scope": "js",
    "body": [
      "// Dynata",
      "const redirect = {",
      "  screenout: `https://dkr1.ssisurveys.com/projects/end?rst=2&psid=\\${EID}`,",
      "  complete:  `https://dkr1.ssisurveys.com/projects/end?rst=1&psid=\\${EID}`,",
      "  quotafull: `https://dkr1.ssisurveys.com/projects/end?rst=3&psid=\\${EID}`,",
      "};"
    ],
    "description": "다이나타 리다이렉트 링크"
  },
  "purespectrumRedirect": {
    "prefix": "purespectrum",
    "scope": "js",
    "body": [
      "// PureSpectrum: ps_hash",
      "const psHash = '${1:ps_hash}';",
      "const redirect = {",
      "  screenout: `https://spectrumsurveys.com/surveydone?st=18&transaction_id=\\${EID}&ps_hash=\\${psHash}`,",
      "  complete:  `https://spectrumsurveys.com/surveydone?st=21&transaction_id=\\${EID}&ps_hash=\\${psHash}`,",
      "  quotafull: `https://spectrumsurveys.com/surveydone?st=17&transaction_id=\\${EID}&ps_hash=\\${psHash}`,",
      "};"
    ],
    "description": "퓨어스펙트럼 리다이렉트 링크"
  },
  "tolunaRedirect": {
    "prefix": "toluna",
    "scope": "js",
    "body": [
      "// Toluna: sname",
      "const sname = '${1:sname}';",
      "const redirect = {",
      "  screenout: `https://ups.surveyrouter.com/TrafficUI/MSCUI/SOTerminated.aspx?sname=\\${sname}&gid=\\${EID}`,",
      "  complete:  `https://ups.surveyrouter.com/TrafficUI/MSCUI/SOQualified.aspx?sname=\\${sname}&gid=\\${EID}`,",
      "  quotafull: `https://ups.surveyrouter.com/TrafficUI/MSCUI/SOQuotafull.aspx?sname=\\${sname}&gid=\\${EID}`,",
      "};"
    ],
    "description": "톨루나 리다이렉트 링크"
  },
  "quotaSetting": {
    "prefix": "quota",
    "scope": "js",
    "body": [
      "const redirect = {",
      "  // Redirect URL",
      "  screenout: `https://SCREENOUT_URL.com`,",
      "  complete: `https://COMPLETE_URL.com`,",
      "  quotafull: `https://QUOTAFULL_URL.com`,",
      "};",
      "",
      "/* Quota */",
      "const quotaFlag = \\$(`#quotaFlag`);",
      "const redirectUrl = \\$(`#redirectUrl`);",
      "",
      "/* Default Screen Out Setting */",
      "quotaFlag.val(1);",
      "redirectUrl.val(redirect.screenout);",
      "setAnswer(1, ValueType.TEXT, 1, true);",
      "",
      "window.quotaFull = () => {",
      "  /* -- Quotas -- */",
      "  const gender = getAnswerSet(GENDER_QID);",
      "  const age = getAnswerSet(AGE_QID);",
      "",
      "  const quotas = {",
      "    // 모든 쿼터(싱글/복수)를 quotas 객체에 담아서 처리",
      "    genderQuota: {",
      "      '남자': gender.exists([1]),",
      "      '여자': gender.exists([2]),",
      "    },",
      "    ageQuota: {",
      "      '20대': age.val() >= 20 && age.val() <= 29,",
      "      '30대': age.val() >= 30 && age.val() <= 39,",
      "      '40대': age.val() >= 40 && age.val() <= 49,",
      "      '50대': age.val() >= 50 && age.val() <= 59,",
      "    },",
      "    genderByAgeQuota: {",
      "      '남자_20대': gender.exists([1]) && age.val() >= 20 && age.val() <= 29,",
      "      '남자_30대': gender.exists([1]) && age.val() >= 30 && age.val() <= 39,",
      "      '남자_40대': gender.exists([1]) && age.val() >= 40 && age.val() <= 49,",
      "      '남자_50대': gender.exists([1]) && age.val() >= 50 && age.val() <= 59,",
      "      '여자_20대': gender.exists([2]) && age.val() >= 20 && age.val() <= 29,",
      "      '여자_30대': gender.exists([2]) && age.val() >= 30 && age.val() <= 39,",
      "      '여자_40대': gender.exists([2]) && age.val() >= 40 && age.val() <= 49,",
      "      '여자_50대': gender.exists([2]) && age.val() >= 50 && age.val() <= 59,",
      "    },",
      "  };",
      "  /* ---- */",
      "",
      "  const quotaFull = quotaCheck(quotas);",
      "",
      "  if (quotaFull) {",
      "    quotaFlag.val(3); // Quota Full",
      "    setAnswer(1, ValueType.TEXT, 3, true);",
      "    redirectUrl.val(redirect.quotafull);",
      "    console.log(`> QUOTA FULL`, redirectUrl.val());",
      "    return false;",
      "  }",
      "",
      "  quotaFlag.val(2); // Complete",
      "  redirectUrl.val(redirect.complete);",
      "  setAnswer(1, ValueType.TEXT, 2, true);",
      "  console.log(`> COMPLETE`, redirectUrl.val());",
      "",
      "  return true;",
      "};",
      "",
      "function quotaCheck(quotas) {",
      "  for (const quota of Object.entries(quotas)) {",
      "    const [quotaName, quotaCondition] = quota;",
      "    const passFlag = Object.entries(quotaCondition).some(([cell, cond]) => cond);",
      "    if (!passFlag) {",
      "      console.log(`⚠️ \\${quotaName}`);",
      "      return true;",
      "    }",
      "  }",
      "  return false;",
      "}"
    ],
    "description": "톨루나 리다이렉트 링크"
  },

  "multiTextAtLeast1": {
    "prefix": "multi-text-1",
    "scope": "js",
    "body": [
      "(() => {",
      "  const errorMessages = {",
      "    empty: '첫번째 칸은 반드시 입력해주세요.',",
      "    outOfOrder: '입력 칸을 순서대로 사용해주세요.',",
      "    duplicate: '중복된 응답이 있습니다.',",
      "  };",
      "",
      "  const question = \\$(`#survey\\${cur}`);",
      "  const nextBtn = question.find('.next-btn-wrapper');",
      "  question.find('.answer').hide();",
      "  nextBtn.attr('onclick', null);",
      "",
      "  const raw = question.find(`.multi input`);",
      "  const rawIndex = [...raw].map((e) => Number(e.id.replace('x', ''))).sort((a, b) => a - b);",
      "",
      "  const inputs = question.find(`.multi input`);",
      "",
      "  inputs.off('keyup change').on('keyup change', (e) => {",
      "    const index = inputs.index(e.currentTarget);",
      "    const prevInputs = inputs.slice(0, index);",
      "",
      "    const hasEmptyPrev = [...prevInputs].some((input) => input.value.trim() === '');",
      "",
      "    if (hasEmptyPrev) {",
      "      e.currentTarget.value = '';",
      "      if (index > 0) {",
      "        const emptyInputs = [...prevInputs].findIndex(input => input.value.trim() === '');",
      "        if (emptyInputs !== -1) {",
      "          inputs.eq(emptyInputs).focus();",
      "        } else {",
      "          inputs.eq(index - 1).focus();",
      "        }",
      "      }",
      "",
      "      alert(errorMessages.outOfOrder);",
      "    }",
      "  });",
      "",
      "  nextBtn.click(() => {",
      "    const inputs = question.find(`.multi input`);",
      "    if (inputs.eq(0).val().trim() === '') {",
      "      alert(errorMessages.empty);",
      "      inputs.eq(0).focus();",
      "      return;",
      "    }",
      "",
      "    const values = [...inputs].filter((e) => e.value.trim() !== '').map((e) => e.value);",
      "    if (new Set(values).size !== values.length) {",
      "      alert(errorMessages.duplicate);",
      "      return;",
      "    }",
      "",
      "    const answer = rawIndex.map((e) => \\$(`#survey\\${cur} #x\\${e}`).val()).join('|');",
      "    \\$(`#answer\\${cur}`).val(answer);",
      "    goNext();",
      "  });",
      "",
      "  return true;",
      "})()"
    ],
    "description": "[복수 주관식] 첫번째 칸 필수/순서대로 응답"
  },
  "multiTextAllAnswer": {
    "prefix": "multi-text-all",
    "scope": "js",
    "body": [
      "(() => {",
      "  const errorMessages = {",
      "    empty: '빈 칸 없이 응답을 입력해 주세요.',",
      "    duplicate: '중복된 응답이 있습니다.',",
      "  };",
      "",
      "  const question = \\$(`#survey\\${cur}`);",
      "  const nextBtn = question.find('.next-btn-wrapper');",
      "  question.find('.answer').hide();",
      "  nextBtn.attr('onclick', null);",
      "",
      "  const raw = question.find(`.multi input`);",
      "  const rawIndex = [...raw].map((e) => Number(e.id.replace('x', ''))).sort((a, b) => a - b);",
      "",
      "  nextBtn.click(() => {",
      "    const inputs = [...question.find(`.multi input`)].filter((input) => !input.readOnly);",
      "    if ([...inputs].some((e) => e.value.trim() === '')) {",
      "      alert(errorMessages.empty);",
      "      return;",
      "    }",
      "",
      "    const values = [...inputs].map((e) => e.value);",
      "    if (new Set(values).size !== values.length) {",
      "      alert(errorMessages.duplicate);",
      "      return;",
      "    }",
      "",
      "    const answer = rawIndex.map((e) => \\$(`#survey\\${cur} #x\\${e}`).val()).join('|');",
      "    \\$(`#answer\\${cur}`).val(answer);",
      "    goNext();",
      "  });",
      "",
      "  return true;",
      "})()"
    ],
    "description": "[복수 주관식] 모두 응답"
  },
  "multiNumber": {
    "prefix": "multi-num",
    "scope": "js",
    "body": [
      "(() => {",
      "  let min = 0;",
      "  let max = 100;",
      "  let total = null;",
      "",
      "  const errorMessages = {",
      "    empty: '모든 항목을 입력해주세요.',",
      "    range: `\\${min}~\\${max} 사이의 값을 입력해주세요.`,",
      "    total: `총합이 \\${total}이 되어야 합니다.`,",
      "  };",
      "",
      "  const question = \\$(`#survey\\${cur}`);",
      "  const nextBtn = question.find('.next-btn-wrapper');",
      "  question.find('.answer').hide();",
      "  question.find('.question-foot').hide();",
      "  nextBtn.attr('onclick', null);",
      "",
      "  const raw = question.find(`.multi input`);",
      "  const rawIndex = [...raw].map((e) => Number(e.id.replace('x', ''))).sort((a, b) => a - b);",
      "",
      "  if (total !== null) {",
      "    const totalInput = \\$(`#survey\\${cur} #xTotal`);",
      "    if (totalInput.length === 1) {",
      "      question.on('keyup', (e) => {",
      "        const inputs = question.find(`.multi input`);",
      "        const sum = [...inputs].reduce((acc, cur) => acc + Number(cur.value), 0);",
      "        totalInput.val(sum);",
      "      });",
      "    }",
      "  }",
      "",
      "  nextBtn.click(() => {",
      "    const inputs = [...question.find(`.multi input`)].filter((input) => !input.readOnly);",
      "",
      "    // Empty",
      "    if (inputs.some((e) => \\$(e).val() === '')) {",
      "      alert(errorMessages.empty);",
      "      return;",
      "    }",
      "",
      "    // Range",
      "    if (inputs.some((e) => Number(e.value) < min || Number(e.value) > max)) {",
      "      alert(errorMessages.range);",
      "      return;",
      "    }",
      "",
      "    // Total",
      "    if (total !== null && inputs.reduce((acc, cur) => acc + Number(cur.value), 0) !== total) {",
      "      alert(errorMessages.total);",
      "      return;",
      "    }",
      "",
      "    const answer = rawIndex.map((e) => \\$(`#survey\\${cur} #x\\${e}`).val()).join('|');",
      "    \\$(`#answer\\${cur}`).val(answer);",
      "    goNext();",
      "  });",
      "",
      "  return true;",
      "})()"
    ],
    "description": "[복수 숫자형] 유효성 검증"
  },
  "multiCond": {
    "prefix": "multi-cond",
    "scope": "js",
    "body": [
      "const multis = question.find('.multi');",
      "const base = getAnswerSet(${1});",
      "multis.hide();",
      "multis.find('input, select').prop('readonly', true);",
      "base.answers.forEach((answer) => {",
      "  const code = answer.value.order;",
      "  const target = question.find(`.multi-\\${code}`);",
      "  target.show();",
      "  target.find('input, select').prop('readonly', false);",
      "});"
    ],
    "description": "[복수 주관식/숫자형] Hide/Show\n- multi snippet에 추가하는 코드\n-조건에 따라 변경 필요"
  },
  "multiDropdown": {
    "prefix": "multi-drop",
    "scope": "js",
    "body": [
      "(() => {",
      "  const duplicateCheck = false;",
      "  const errorMessages = {",
      "    empty: '모든 항목을 응답해주세요.',",
      "    duplicate: '중복된 항목이 있습니다.',",
      "  };",
      "  const question = \\$(`#survey\\${cur}`);",
      "  const nextBtn = question.find('.next-btn-wrapper');",
      "  question.find('.answer').hide();",
      "  question.find('.question-foot').hide();",
      "  nextBtn.attr('onclick', null);",
      "",
      "  const raw = question.find(`.multi select`);",
      "  const rawIndex = [...raw].map((e) => Number(e.id.replace('x', ''))).sort((a, b) => a - b);",
      "",
      "  nextBtn.click(() => {",
      "    // Empty",
      "    const selects = [...question.find(`.multi select`)].filter((select) => !select.readOnly);",
      "    if (selects.some((select) => select.value === '')) {",
      "      alert(errorMessages.empty);",
      "      return;",
      "    }",
      "",
      "    // Duplicate",
      "    const values = [...selects].map((select) => select.value);",
      "    if (duplicateCheck && values.some((value, index) => values.indexOf(value) !== index)) {",
      "      alert(errorMessages.duplicate);",
      "      return;",
      "    }",
      "",
      "    const answer = rawIndex.map((e) => \\$(`#survey\\${cur} #x\\${e}`).val()).join('|');",
      "    \\$(`#answer\\${cur}`).val(answer);",
      "    goNext();",
      "  });",
      "",
      "  return true;",
      "})()"
    ],
    "description": "[복수 드롭다운] 유효성 검증 / 중복 검사"
  }
}
